
rules_version = '2';

service cloud.firestore {

  // ==================================
  // == Helper Functions ==
  // ==================================

  function isAuthenticated() {
    return request.auth != null;
  }

  function isDoctor() {
    // Ensure the user document can be read by the user themselves for this function to work
    // Also, check if request.auth is not null before trying to access request.auth.uid
    if (!isAuthenticated()) {
      return false;
    }
    let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    return userData != null && userData.userType == 'doctor';
  }

  function isPatient() {
    if (!isAuthenticated()) {
      return false;
    }
    let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    return userData != null && userData.userType == 'patient';
  }

  function isDoctorManagingPatient(patientRecordId) {
    if (!isDoctor() || !(patientRecordId is string && patientRecordId.size() > 0)) {
      return false;
    }
    let patientRecord = get(/databases/$(database)/documents/patientRecords/ + patientRecordId).data;
    return patientRecord != null &&
           patientRecord.doctorId == request.auth.uid;
  }

  function isLinkedPatient(patientRecordId) {
    if (!isPatient() || !(patientRecordId is string && patientRecordId.size() > 0)) {
      return false;
    }
    let patientRecord = get(/databases/$(database)/documents/patientRecords/ + patientRecordId).data;
    return patientRecord != null &&
           patientRecord.linkedAuthUid == request.auth.uid;
  }

  // ==================================
  // == Collection Rules ==
  // ==================================

  match /databases/{database}/documents {

    // == Users Collection ==
    match /users/{userId} {
      allow create: if isAuthenticated() &&
                      request.auth.uid == userId &&
                      request.resource.data.uid == request.auth.uid &&
                      request.resource.data.email == request.auth.token.email &&
                      request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                      request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                      request.resource.data.userType is string && (request.resource.data.userType == 'doctor' || request.resource.data.userType == 'patient') &&
                      request.resource.data.createdAt == request.time;

      // Explicitly allow user to read their own document, and doctors to read any.
      allow read: if isAuthenticated() && 
                    (request.auth.uid == userId || 
                     (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'doctor')
                    );

      allow update: if isAuthenticated() &&
                      request.auth.uid == userId &&
                      request.resource.data.uid == resource.data.uid && 
                      request.resource.data.email == resource.data.email && 
                      request.resource.data.userType == resource.data.userType && 
                      request.resource.data.createdAt == resource.data.createdAt; 
      
      allow delete: if false; 
    }

    // == PatientRecords Collection ==
    match /patientRecords/{recordId} {
      // DEBUG: Temporarily simplified create rule
      allow create: if isAuthenticated() && 
                      isDoctor() && // isDoctor() implicitly checks isAuthenticated() again
                      request.resource.data.doctorId == request.auth.uid; 
                      // If this still fails, isDoctor() is the primary suspect,
                      // or the doctorId being sent isn't matching request.auth.uid.

      // Original more specific create rule (for reference when we reinstate it)
      // allow create: if isDoctor() &&
      //                 request.resource.data.doctorId == request.auth.uid &&
      //                 request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
      //                 request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
      //                 request.resource.data.idNumber is string && request.resource.data.idNumber.size() > 0 &&
      //                 request.resource.data.initialPassword is string && request.resource.data.initialPassword.size() >= 6 &&
      //                 !('linkedAuthUid' in request.resource.data);


      allow read: if isAuthenticated() &&
                    (isDoctorManagingPatient(recordId) || isLinkedPatient(recordId));

      allow update: if isDoctorManagingPatient(recordId) &&
                      request.resource.data.doctorId == resource.data.doctorId && 
                      request.resource.data.createdAt == resource.data.createdAt; 

      allow delete: if isDoctorManagingPatient(recordId);
    }

    // == AiInstructions Collection ==
    match /aiInstructions/{doctorId} {
      allow read, write: if isDoctor() && request.auth.uid == doctorId;
    }

    // == Appointments Collection ==
    match /appointments/{appointmentId} {
      allow create: if isAuthenticated() &&
                      ( (isPatient() && request.resource.data.patientAuthUid == request.auth.uid) ||
                        (isDoctor() /* && doctorCanAccessPatient(request.resource.data.patientAuthUid) */ )
                      );

      allow read: if isAuthenticated() &&
                    ( (isPatient() && resource.data.patientAuthUid == request.auth.uid) ||
                      (isDoctor() && resource.data.doctorId == request.auth.uid) );

      allow update, delete: if isAuthenticated() &&
                              ( (isPatient() && resource.data.patientAuthUid == request.auth.uid) ||
                                (isDoctor() && resource.data.doctorId == request.auth.uid) );
    }

    // == Diagnoses Collection ==
    match /diagnoses/{diagnosisId} {
      allow create: if isDoctorManagingPatient(request.resource.data.patientRecordId) &&
                      request.resource.data.diagnosedBy == request.auth.uid;

      allow read: if isAuthenticated() &&
                    (isDoctorManagingPatient(resource.data.patientRecordId) ||
                     isLinkedPatient(resource.data.patientRecordId));

      allow update, delete: if isDoctorManagingPatient(resource.data.patientRecordId) &&
                              resource.data.diagnosedBy == request.auth.uid;
    }

    // == PatientDocuments Collection ==
    match /patientDocuments/{documentId} {
      allow create: if isDoctorManagingPatient(request.resource.data.patientRecordId) &&
                      request.resource.data.uploadedBy == request.auth.uid;

      allow read: if isAuthenticated() &&
                    (isDoctorManagingPatient(resource.data.patientRecordId) ||
                     isLinkedPatient(resource.data.patientRecordId));

      allow delete: if isDoctorManagingPatient(resource.data.patientRecordId) &&
                      resource.data.uploadedBy == request.auth.uid;
    }

    // == ChatMessages Collection ==
    match /chatMessages/{chatId} {
      allow create: if isAuthenticated() &&
                      isPatient() &&
                      request.resource.data.patientAuthUid == request.auth.uid &&
                      request.resource.data.senderId == request.auth.uid &&
                      request.resource.data.isUser == true;

      allow read: if isAuthenticated() &&
                    isPatient() && 
                    resource.data.patientAuthUid == request.auth.uid;

      allow update, delete: if false; 
    }

    // == PillReminders Collection ==
    match /pillReminders/{reminderId} {
      allow create: if isPatient() &&
                      request.resource.data.patientAuthUid == request.auth.uid;

      allow read, update, delete: if isPatient() &&
                                   resource.data.patientAuthUid == request.auth.uid;
    }
  }
}

    