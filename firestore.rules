
rules_version = '2';

service cloud.firestore {

  // ==================================
  // == Helper Functions ==
  // ==================================

  function isAuthenticated() {
    return request.auth != null;
  }

  function isDoctor() {
    // Ensure request.auth.uid is available before trying to get user data
    if (!isAuthenticated() || request.auth.uid == null) {
      return false;
    }
    let userDocPath = /databases/$(database)/documents/users/$(request.auth.uid);
    // Check if document exists and data is not null before accessing userType
    return exists(userDocPath) &&
           get(userDocPath).data != null &&
           get(userDocPath).data.userType == 'doctor';
  }

  function isPatient() {
    // Ensure request.auth.uid is available before trying to get user data
    if (!isAuthenticated() || request.auth.uid == null) {
      return false;
    }
    let userDocPath = /databases/$(database)/documents/users/$(request.auth.uid);
    // Check if document exists and data is not null before accessing userType
    return exists(userDocPath) &&
           get(userDocPath).data != null &&
           get(userDocPath).data.userType == 'patient';
  }

  // Check if the authenticated doctor manages the patient record.
  function isDoctorManagingPatient(patientRecordId) {
    if (!isDoctor() || !(patientRecordId is string) || patientRecordId.size() == 0) {
      return false;
    }
    let patientRecordPath = /databases/$(database)/documents/patientRecords/$(patientRecordId);
    return exists(patientRecordPath) &&
           get(patientRecordPath).data != null &&
           get(patientRecordPath).data.doctorId == request.auth.uid;
  }

  // Check if the authenticated patient is linked to the patient record.
  function isLinkedPatient(patientRecordId) {
     if (!isPatient() || !(patientRecordId is string) || patientRecordId.size() == 0) {
      return false;
    }
    let patientRecordPath = /databases/$(database)/documents/patientRecords/$(patientRecordId);
    return exists(patientRecordPath) &&
           get(patientRecordPath).data != null &&
           get(patientRecordPath).data.linkedAuthUid == request.auth.uid;
  }


  // ==================================
  // == Collection Rules ==
  // ==================================
  match /databases/{database}/documents {

    // == Users Collection ==
    match /users/{userId} {
      allow create: if isAuthenticated() &&
                      request.auth.uid == userId &&
                      request.resource.data.uid == request.auth.uid &&
                      request.resource.data.email == request.auth.token.email &&
                      request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                      request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                      request.resource.data.userType is string && (request.resource.data.userType == 'doctor' || request.resource.data.userType == 'patient') &&
                      // For create, ensure 'createdAt' is a server timestamp placeholder or matches request.time if client provides it.
                      // More robustly, just check it's present. The server will set it.
                      'createdAt' in request.resource.data;


      allow read: if isAuthenticated(); // Simplification: any authenticated user can read any user profile.
                      // More restrictive: if isAuthenticated() && (request.auth.uid == userId || isDoctor());

      allow update: if isAuthenticated() &&
                      request.auth.uid == userId &&
                      // Prevent changing critical immutable fields
                      request.resource.data.uid == resource.data.uid &&
                      request.resource.data.email == resource.data.email &&
                      request.resource.data.userType == resource.data.userType &&
                      request.resource.data.createdAt == resource.data.createdAt;
                      // Add specific field validations for what can be updated.

      allow delete: if false; // Generally users should not delete their own auth-linked profiles directly
    }

    // == PatientRecords Collection ==
    match /patientRecords/{recordId} {
      allow create: if isDoctor() &&
                      request.resource.data.doctorId is string && request.resource.data.doctorId == request.auth.uid &&
                      request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                      request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                      request.resource.data.idNumber is string && request.resource.data.idNumber.size() > 0 &&
                      request.resource.data.initialPassword is string && request.resource.data.initialPassword.size() >= 6 &&
                      'createdAt' in request.resource.data && // Client sends serverTimestamp()
                      !('linkedAuthUid' in request.resource.data); // linkedAuthUid cannot be set on create by doctor directly

      // **SECURITY WARNING for PatientRecord Login**:
      // The following 'list' rule is very permissive to allow client-side querying by email/idNumber
      // for the custom PatientRecord login.
      // IN PRODUCTION: This credential check MUST be moved to a backend Cloud Function or secure API route.
      // DO NOT use this permissive read rule in production if initialPassword is sensitive.
      allow list: if true; // Allows querying by email or idNumber for login. HIGHLY INSECURE FOR PROD.
      allow get: if isAuthenticated() &&
                    ( isDoctorManagingPatient(recordId) || isLinkedPatient(recordId) );


      allow update: if isDoctorManagingPatient(recordId) &&
                      request.resource.data.doctorId == resource.data.doctorId && // doctorId cannot change
                      request.resource.data.idNumber == resource.data.idNumber && // idNumber usually shouldn't change easily
                      request.resource.data.createdAt == resource.data.createdAt; // createdAt cannot change
                      // Add more specific field update validations here.
                      // Example: Allow updating linkedAuthUid if doctor is managing and it's not already set.
                      // Example: Allow doctor to change initialPassword if needed.

      allow delete: if isDoctorManagingPatient(recordId);
    }

    // == AiInstructions Collection ==
    // Using docId_doctorId as wildcard name, can be anything, e.g. {instructionSetId}
    // The rule inside enforces that the docId must be the doctor's UID.
    match /aiInstructions/{docId_doctorId} {
      allow read, write: if isDoctor() && request.auth.uid == docId_doctorId;
    }

    // == Appointments Collection ==
    match /appointments/{appointmentId} {
      allow create: if isAuthenticated() &&
                      ( (isPatient() && request.resource.data.patientAuthUid == request.auth.uid) ||
                        (isDoctor() && isDoctorManagingPatient(request.resource.data.patientRecordId) && request.resource.data.doctorId == request.auth.uid) );
                      // Add more validation for fields like appointmentDate, reason, etc.

      allow list: if isAuthenticated() &&
                    ( (isPatient() && request.query.resource.data.patientAuthUid == request.auth.uid) ||
                      (isDoctor() && request.query.resource.data.doctorId == request.auth.uid) );

      allow get, update, delete: if isAuthenticated() &&
                    ( (isPatient() && resource.data.patientAuthUid == request.auth.uid) ||
                      (isDoctor() && resource.data.doctorId == request.auth.uid && isDoctorManagingPatient(resource.data.patientRecordId)) );
    }

    // == Diagnoses Collection ==
    match /diagnoses/{diagnosisId} {
      allow create: if isDoctorManagingPatient(request.resource.data.patientRecordId) &&
                      request.resource.data.diagnosedBy == request.auth.uid;

      allow list: if isDoctor() && request.query.resource.data.patientRecordId is string && isDoctorManagingPatient(request.query.resource.data.patientRecordId);
                  // Or, if patients can list their own:
                  // || (isPatient() && isLinkedPatient(request.query.resource.data.patientRecordId))


      allow get: if isAuthenticated() &&
                    ( isDoctorManagingPatient(resource.data.patientRecordId) ||
                      isLinkedPatient(resource.data.patientRecordId) );

      allow update, delete: if isDoctorManagingPatient(resource.data.patientRecordId) &&
                              resource.data.diagnosedBy == request.auth.uid;
    }

    // == PatientDocuments Collection ==
    match /patientDocuments/{documentId} {
      allow create: if isDoctorManagingPatient(request.resource.data.patientRecordId) &&
                      request.resource.data.uploadedBy == request.auth.uid;

      allow list: if isDoctor() && request.query.resource.data.patientRecordId is string && isDoctorManagingPatient(request.query.resource.data.patientRecordId);
                  // Or, if patients can list their own:
                  // || (isPatient() && isLinkedPatient(request.query.resource.data.patientRecordId))

      allow get: if isAuthenticated() &&
                    ( isDoctorManagingPatient(resource.data.patientRecordId) ||
                      isLinkedPatient(resource.data.patientRecordId) );

      allow delete: if isDoctorManagingPatient(resource.data.patientRecordId) &&
                      resource.data.uploadedBy == request.auth.uid;
    }

    // == ChatMessages Collection ==
    match /chatMessages/{chatId} {
      allow create: if isPatient() &&
                      request.resource.data.patientAuthUid == request.auth.uid &&
                      request.resource.data.senderId == request.auth.uid &&
                      request.resource.data.isUser == true;
                      // AI responses must be written by a backend/admin process.

      allow list: if isPatient() && request.query.resource.data.patientAuthUid == request.auth.uid;
                  // Doctor access to chat history needs careful consideration and likely a backend function
                  // or specific linking in PatientRecord that allows a targeted get.
                  // For now, only patients can list their own chats.

      allow update, delete: if false; // Messages are immutable
    }

    // == PillReminders Collection ==
    match /pillReminders/{reminderId} {
      allow create: if isPatient() &&
                      request.resource.data.patientAuthUid == request.auth.uid;

      allow list, get, update, delete: if isPatient() &&
                            resource.data.patientAuthUid == request.auth.uid &&
                            // For update, ensure patientAuthUid is not changed
                            (request.method == 'update' ? request.resource.data.patientAuthUid == resource.data.patientAuthUid : true);
    }
  }
}

    