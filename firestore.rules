
rules_version = '2';

service cloud.firestore {

  // ==================================
  // == Helper Functions ==
  // ==================================

  function isAuthenticated() {
    return request.auth != null;
  }

  function isDoctor() {
    // Ensure request.auth.uid is available before trying to get user data
    if (!isAuthenticated() || request.auth.uid == null) {
      return false;
    }
    let userDocPath = /databases/$(database)/documents/users/$(request.auth.uid);
    // Check if the document exists and data is not null before accessing userType
    return exists(userDocPath) &&
           get(userDocPath).data != null &&
           get(userDocPath).data.userType == 'doctor';
  }

  function isPatient() {
    if (!isAuthenticated() || request.auth.uid == null) {
      return false;
    }
    let userDocPath = /databases/$(database)/documents/users/$(request.auth.uid);
    return exists(userDocPath) &&
           get(userDocPath).data != null &&
           get(userDocPath).data.userType == 'patient';
  }

  // Check if the authenticated doctor manages the patient record.
  function isDoctorManagingPatient(patientRecordId) {
    if (!isDoctor() || !(patientRecordId is string) || patientRecordId.size() == 0) {
      return false;
    }
    let patientRecordPath = /databases/$(database)/documents/patientRecords/$(patientRecordId);
    return exists(patientRecordPath) &&
           get(patientRecordPath).data != null &&
           get(patientRecordPath).data.doctorId == request.auth.uid;
  }

  // Check if the authenticated patient is linked to the patient record.
  function isLinkedPatient(patientRecordId) {
     if (!isPatient() || !(patientRecordId is string) || patientRecordId.size() == 0) {
      return false;
    }
    let patientRecordPath = /databases/$(database)/documents/patientRecords/$(patientRecordId);
    return exists(patientRecordPath) &&
           get(patientRecordPath).data != null &&
           get(patientRecordPath).data.linkedAuthUid == request.auth.uid;
  }

  // ==================================
  // == Collection Rules ==
  // ==================================
  match /databases/{database}/documents {

    // == Users Collection ==
    match /users/{userId} {
      allow create: if isAuthenticated() &&
                      request.auth.uid == userId &&
                      request.resource.data.uid == request.auth.uid &&
                      request.resource.data.email == request.auth.token.email &&
                      request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                      request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                      request.resource.data.userType is string && (request.resource.data.userType == 'doctor' || request.resource.data.userType == 'patient') &&
                      'createdAt' in request.resource.data; // Client sends serverTimestamp()

      allow read: if isAuthenticated(); // Simplified for easier debugging of helper functions that get user data

      allow update: if isAuthenticated() &&
                      request.auth.uid == userId &&
                      // Prevent changing critical fields
                      request.resource.data.uid == resource.data.uid &&
                      request.resource.data.email == resource.data.email &&
                      request.resource.data.userType == resource.data.userType &&
                      request.resource.data.createdAt == resource.data.createdAt;
                      // Allow other fields to be updated

      allow delete: if false; // Generally, don't allow client-side user deletion easily
    }

    // == PatientRecords Collection ==
    match /patientRecords/{recordId} {
      allow create: if isDoctor() &&
                      request.resource.data.doctorId is string && // Ensure doctorId is string
                      request.resource.data.doctorId == request.auth.uid &&
                      request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                      request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                      request.resource.data.idNumber is string && request.resource.data.idNumber.size() > 0 &&
                      request.resource.data.initialPassword is string && request.resource.data.initialPassword.size() >= 6 &&
                      'createdAt' in request.resource.data && // Client sends serverTimestamp()
                      !('linkedAuthUid' in request.resource.data); // Cannot set linkedAuthUid on create

      allow get: if isAuthenticated() &&
                   (isDoctorManagingPatient(recordId) || isLinkedPatient(recordId));

      allow list: if isDoctor(); // Relies on client query: where("doctorId", "==", request.auth.uid)

      allow update: if isDoctorManagingPatient(recordId) &&
                      request.resource.data.doctorId == resource.data.doctorId && // doctorId cannot change
                      request.resource.data.createdAt == resource.data.createdAt; // createdAt cannot change
                      // Allow other updates, including linkedAuthUid by the managing doctor

      allow delete: if isDoctorManagingPatient(recordId);
    }

    // == AiInstructions Collection ==
    // Assuming doctorId in the path is the UID of the doctor who owns these instructions.
    match /aiInstructions/{docId_doctorId} { // Renamed wildcard for clarity
      allow read, write: if isDoctor() && request.auth.uid == docId_doctorId;
    }

    // == Appointments Collection ==
    // This needs careful thought based on who can schedule for whom.
    match /appointments/{appointmentId} {
      allow create: if isAuthenticated() &&
                      ( (isPatient() && request.resource.data.patientAuthUid == request.auth.uid) ||
                        (isDoctor() && isDoctorManagingPatient(request.resource.data.patientRecordId) ) // Doctor can only create for their patients
                      );

      allow read: if isAuthenticated() &&
                    ( (isPatient() && resource.data.patientAuthUid == request.auth.uid) ||
                      (isDoctor() && resource.data.doctorId == request.auth.uid) || // Doctor can read their appointments
                      (isDoctor() && isDoctorManagingPatient(resource.data.patientRecordId)) // Doctor can read appointments of their patients
                    );

      allow update, delete: if isAuthenticated() &&
                              ( (isPatient() && resource.data.patientAuthUid == request.auth.uid) ||
                                (isDoctor() && resource.data.doctorId == request.auth.uid) ); // Simplistic, refine field updates
    }

    // == Diagnoses Collection ==
    match /diagnoses/{diagnosisId} {
      allow create: if isDoctorManagingPatient(request.resource.data.patientRecordId) &&
                      request.resource.data.diagnosedBy == request.auth.uid;

      allow get: if isAuthenticated() &&
                   ( isDoctorManagingPatient(resource.data.patientRecordId) ||
                     isLinkedPatient(resource.data.patientRecordId) );

      allow list: if isDoctor(); // Relies on client query: where("patientRecordId", "==", patientRecordId) and possibly where("diagnosedBy", "==", auth.uid)

      allow update, delete: if isDoctorManagingPatient(resource.data.patientRecordId) &&
                              resource.data.diagnosedBy == request.auth.uid;
    }

    // == PatientDocuments Collection ==
    match /patientDocuments/{documentId} {
      allow create: if isDoctorManagingPatient(request.resource.data.patientRecordId) &&
                      request.resource.data.uploadedBy == request.auth.uid;

      allow get: if isAuthenticated() &&
                    ( isDoctorManagingPatient(resource.data.patientRecordId) ||
                      isLinkedPatient(resource.data.patientRecordId) );

      allow list: if isDoctor(); // Relies on client query: where("patientRecordId", "==", patientRecordId)

      allow delete: if isDoctorManagingPatient(resource.data.patientRecordId) &&
                      resource.data.uploadedBy == request.auth.uid;
    }

    // == ChatMessages Collection ==
    // For doctor viewing chats linked to a patient record (via linkedAuthUid)
    match /chatMessages/{chatId} {
      allow create: if isAuthenticated() &&
                      isPatient() &&
                      request.resource.data.patientAuthUid == request.auth.uid &&
                      request.resource.data.senderId == request.auth.uid &&
                      request.resource.data.isUser == true;

      allow get: if isAuthenticated() &&
                   ( (isPatient() && resource.data.patientAuthUid == request.auth.uid) ||
                     (isDoctor() && exists(/databases/$(database)/documents/patientRecords/ + resource.data.patientRecordId) && get(/databases/$(database)/documents/patientRecords/ + resource.data.patientRecordId).data.doctorId == request.auth.uid && get(/databases/$(database)/documents/patientRecords/ + resource.data.patientRecordId).data.linkedAuthUid == resource.data.patientAuthUid)
                   );

      allow list: if isAuthenticated() &&
                    ( (isPatient() && request.query.filters[0][2] == request.auth.uid) || // if query is where("patientAuthUid", "==", auth.uid)
                      isDoctor() // Doctor needs a client-side filter by patientAuthUid that they manage
                    );


      allow update, delete: if false; // Generally, chat messages are immutable
    }

    // == PillReminders Collection ==
    match /pillReminders/{reminderId} {
      allow create: if isPatient() &&
                      request.resource.data.patientAuthUid == request.auth.uid;

      allow read, delete: if isPatient() &&
                            resource.data.patientAuthUid == request.auth.uid;

      allow update: if isPatient() &&
                      resource.data.patientAuthUid == request.auth.uid &&
                      request.resource.data.patientAuthUid == request.auth.uid;
    }
  }
}
