
rules_version = '2';

service cloud.firestore {

  // --- Helper Functions ---
  function isAuthenticated() {
    return request.auth != null;
  }

  function isUser(userId) {
    return isAuthenticated() && request.auth.uid == userId;
  }

  // Function to get user data (like userType)
  // Note: get() operations in rules count towards your Firestore read quotas.
  function getUserData(userId) {
    return get(/databases/$(database)/documents/users/$(userId)).data;
  }

  function isDoctor() {
    return isAuthenticated() && getUserData(request.auth.uid).userType == 'doctor';
  }

  function isPatient() {
    return isAuthenticated() && getUserData(request.auth.uid).userType == 'patient';
  }

  // Check if the requesting doctor is the one managing this patient record
  function isDoctorManagingPatient(patientRecordId) {
    if (patientRecordId is string && patientRecordId.size() > 0) {
      let patientRecord = get(/databases/$(database)/documents/patientRecords/$(patientRecordId)).data;
      return patientRecord != null && patientRecord.doctorId == request.auth.uid;
    }
    return false;
  }

  // Check if the requesting user is the linked patient for a patient record
  function isLinkedPatientForRecord(patientRecordId) {
    if (patientRecordId is string && patientRecordId.size() > 0) {
      let patientRecord = get(/databases/$(database)/documents/patientRecords/$(patientRecordId)).data;
      return patientRecord != null && patientRecord.linkedAuthUid == request.auth.uid;
    }
    return false;
  }


  match /databases/{database}/documents {

    // --- Users Collection ---
    // Stores user profiles (doctors and patients)
    match /users/{userId} {
      allow read: if isAuthenticated() && (isUser(userId) || isDoctor()); // Users can read their own profile, Doctors can read any user profile (e.g. for patient lookups) - refine if needed
      allow create: if request.auth != null && request.auth.uid == userId
                    && request.resource.data.uid == request.auth.uid
                    && request.resource.data.email == request.auth.token.email
                    && (request.resource.data.userType == 'doctor' || request.resource.data.userType == 'patient')
                    && request.resource.data.firstName is string && request.resource.data.firstName.size() > 0
                    && request.resource.data.lastName is string && request.resource.data.lastName.size() > 0
                    && request.resource.data.size() >= 5 && request.resource.data.size() <= 7; // Adjust size based on expected fields
      allow update: if isUser(userId)
                    // Prevent changing critical fields
                    && request.resource.data.uid == resource.data.uid
                    && request.resource.data.email == resource.data.email
                    && request.resource.data.userType == resource.data.userType
                    && request.resource.data.createdAt == resource.data.createdAt;
      allow delete: if false; // Generally, users should not delete their own auth-linked profiles directly
    }

    // --- Patient Records Collection ---
    // Data records for patients, managed by doctors.
    match /patientRecords/{recordId} {
      allow create: if isDoctor()
                    && request.resource.data.doctorId == request.auth.uid
                    && request.resource.data.firstName is string && request.resource.data.firstName.size() > 0
                    && request.resource.data.lastName is string && request.resource.data.lastName.size() > 0
                    && request.resource.data.idNumber is string && request.resource.data.idNumber.size() > 0;
      allow read: if isDoctor() && resource.data.doctorId == request.auth.uid;
                  // Add if a patient can read their own record once linked:
                  // || (isPatient() && resource.data.linkedAuthUid == request.auth.uid)
      allow update: if isDoctor() && resource.data.doctorId == request.auth.uid
                     && request.resource.data.doctorId == resource.data.doctorId // doctorId cannot change
                     && request.resource.data.idNumber == resource.data.idNumber; // idNumber cannot change
      allow delete: if isDoctor() && resource.data.doctorId == request.auth.uid;
    }

    // --- AI Instructions Collection ---
    // Doctors customize AI prompts
    match /aiInstructions/{doctorId} {
      allow read, write: if isDoctor() && isUser(doctorId);
    }

    // --- Appointments Collection ---
    match /appointments/{appointmentId} {
      allow create: if (isPatient() && request.resource.data.patientId == request.auth.uid) // Patient schedules for self
                    || (isDoctor() && isDoctorManagingPatient(request.resource.data.patientRecordId)); // Doctor schedules for their patient (assuming patientRecordId is used here to link)
                    // Add validation for required fields: patientId, doctorId, appointmentDate
      allow read: if (isPatient() && resource.data.patientId == request.auth.uid)
                   || (isDoctor() && resource.data.doctorId == request.auth.uid)
                   || (isDoctor() && isDoctorManagingPatient(resource.data.patientRecordId)); // Doctor can read appointments of their patients
      allow update: if (isPatient() && resource.data.patientId == request.auth.uid && request.resource.data.patientId == resource.data.patientId) // Patient updates their own appointment
                     || (isDoctor() && resource.data.doctorId == request.auth.uid && request.resource.data.doctorId == resource.data.doctorId); // Doctor updates their own appointment
                     // Prevent changing key IDs like patientId, doctorId after creation
      allow delete: if (isPatient() && resource.data.patientId == request.auth.uid)
                     || (isDoctor() && resource.data.doctorId == request.auth.uid);
    }

    // --- Diagnoses Collection ---
    match /diagnoses/{diagnosisId} {
      allow create: if isDoctor() && isDoctorManagingPatient(request.resource.data.patientRecordId) // Doctor creates for their patient
                    && request.resource.data.diagnosedBy == request.auth.uid;
                    // Add validation for required fields: patientRecordId, diagnosisText, diagnosedBy, diagnosisDate
      allow read: if (isPatient() && isLinkedPatientForRecord(resource.data.patientRecordId)) // Patient reads their own
                   || (isDoctor() && isDoctorManagingPatient(resource.data.patientRecordId)); // Doctor reads for their patient
      allow update: if isDoctor() && resource.data.diagnosedBy == request.auth.uid && isDoctorManagingPatient(resource.data.patientRecordId)
                     && request.resource.data.diagnosedBy == resource.data.diagnosedBy // cannot change who diagnosed
                     && request.resource.data.patientRecordId == resource.data.patientRecordId; // cannot change patient
      allow delete: if isDoctor() && resource.data.diagnosedBy == request.auth.uid && isDoctorManagingPatient(resource.data.patientRecordId);
    }

    // --- Patient Documents Collection ---
    // Assumes patientId here links to a patientRecord document ID
    match /patientDocuments/{documentId} {
      allow create: if isDoctor() && isDoctorManagingPatient(request.resource.data.patientRecordId) // Doctor uploads for their patient
                    && request.resource.data.uploadedBy == request.auth.uid;
                    // Add validation for required fields: patientRecordId, documentName, documentPath, uploadedBy
      allow read: if (isPatient() && isLinkedPatientForRecord(resource.data.patientRecordId)) // Patient reads their own
                   || (isDoctor() && isDoctorManagingPatient(resource.data.patientRecordId)); // Doctor reads for their patient
      allow delete: if isDoctor() && resource.data.uploadedBy == request.auth.uid && isDoctorManagingPatient(resource.data.patientRecordId);
    }

    // --- Chat Messages Collection ---
    // Assumes patientId links to the patient's auth UID for simplicity here
    match /chatMessages/{chatId} {
      allow create: if isPatient() && request.resource.data.patientId == request.auth.uid
                     && request.resource.data.senderId == request.auth.uid
                     && request.resource.data.isUser == true;
                     // AI/server-sent messages would need to bypass these client rules (e.g., using Admin SDK in a backend function)
      allow read: if (isPatient() && resource.data.patientId == request.auth.uid) // Patient reads their own chats
                  //  || (isDoctor() && isDoctorLinkedToPatientChat(resource.data.patientId)); // Doctor reads chats of their linked patients
                  // The isDoctorLinkedToPatientChat needs a way to verify doctor-patient linkage.
                  // For simplicity, if patientId in chatMessage links to a patientRecordId, it's easier:
                  //  || (isDoctor() && isDoctorManagingPatient(resource.data.patientRecordId)); // Assuming chatMessage has patientRecordId
                  // For now, let's assume only patients read their own chats directly. Doctor access might be through a summary or a privileged backend.
                  ;
      allow update, delete: if false; // Chat messages are generally immutable
    }

    // --- Pill Reminders Collection ---
    match /pillReminders/{reminderId} {
      allow read, write: if isPatient() && resource.data.patientUid == request.auth.uid; // User can manage their own reminders
      allow create: if isPatient() && request.resource.data.patientUid == request.auth.uid;
                    // Add validation for required fields
    }
  }
}

    