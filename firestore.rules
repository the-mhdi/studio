
rules_version = '2';

service cloud.firestore {

  // ==================================
  // == Helper Functions ==
  // ==================================

  function isAuthenticated() {
    return request.auth != null;
  }

  function isDoctor() {
    // Check if user document exists and has userType 'doctor'
    return isAuthenticated() &&
           request.auth.uid != null &&
           exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'doctor';
  }

  function isPatient() {
    // Check if user document exists and has userType 'patient'
    return isAuthenticated() &&
           request.auth.uid != null &&
           exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'patient';
  }

  // Check if the authenticated doctor manages the patient record.
  function isDoctorManagingPatient(patientRecordId) {
    return patientRecordId is string && patientRecordId.size() > 0 && // Ensure patientRecordId is valid
           isDoctor() &&
           exists(/databases/$(database)/documents/patientRecords/$(patientRecordId)) &&
           get(/databases/$(database)/documents/patientRecords/$(patientRecordId)).data.doctorId == request.auth.uid;
  }

  // Check if the authenticated patient is linked to the patient record.
  function isLinkedPatient(patientRecordId) {
    return patientRecordId is string && patientRecordId.size() > 0 && // Ensure patientRecordId is valid
           isPatient() &&
           exists(/databases/$(database)/documents/patientRecords/$(patientRecordId)) &&
           get(/databases/$(database)/documents/patientRecords/$(patientRecordId)).data.linkedAuthUid == request.auth.uid;
  }

  // ==================================
  // == Collection Rules ==
  // ==================================

  match /databases/{database}/documents {

    // == Users Collection ==
    match /users/{userId} {
      allow create: if isAuthenticated() &&
                      request.auth.uid == userId &&
                      request.resource.data.uid == request.auth.uid &&
                      request.resource.data.email == request.auth.token.email &&
                      request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                      request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                      request.resource.data.userType is string && (request.resource.data.userType == 'doctor' || request.resource.data.userType == 'patient') &&
                      request.resource.data.createdAt == request.time;

      allow read: if isAuthenticated() && (request.auth.uid == userId || isDoctor()); // User can read own, doctors can read any (for now)

      allow update: if isAuthenticated() &&
                      request.auth.uid == userId &&
                      // Prevent changing critical fields
                      request.resource.data.uid == resource.data.uid &&
                      request.resource.data.email == resource.data.email &&
                      request.resource.data.userType == resource.data.userType &&
                      request.resource.data.createdAt == resource.data.createdAt;
                      // Add validation for other fields being updated

      allow delete: if false; // Generally, users shouldn't delete their own accounts directly via client
    }

    // == PatientRecords Collection ==
    match /patientRecords/{recordId} {
      allow create: if isDoctor() &&
                      request.resource.data.doctorId == request.auth.uid &&
                      request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                      request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                      request.resource.data.idNumber is string && request.resource.data.idNumber.size() > 0 &&
                      request.resource.data.initialPassword is string && request.resource.data.initialPassword.size() >= 6 &&
                      request.resource.data.createdAt == request.time &&
                      !('linkedAuthUid' in request.resource.data); // linkedAuthUid cannot be set on create

      allow read: if isAuthenticated() &&
                    ( isDoctorManagingPatient(recordId) || isLinkedPatient(recordId) );

      allow update: if isDoctorManagingPatient(recordId) &&
                      // Ensure doctorId and createdAt are not changed by client on update
                      request.resource.data.doctorId == resource.data.doctorId &&
                      request.resource.data.createdAt == resource.data.createdAt;
                      // Add other field validations as necessary.
                      // Example: allow doctor to link a patient: 'linkedAuthUid' in request.resource.data.keys()

      allow delete: if isDoctorManagingPatient(recordId);
    }

    // == AiInstructions Collection ==
    match /aiInstructions/{doctorId} {
      allow read, write: if isDoctor() && request.auth.uid == doctorId;
    }

    // == Appointments Collection ==
    // Assuming appointments have: patientAuthUid, doctorId, and optionally patientRecordId
    match /appointments/{appointmentId} {
      allow create: if isAuthenticated() &&
                      ( (isPatient() && request.resource.data.patientAuthUid == request.auth.uid) ||
                        // Doctor creating for a patient they manage
                        (isDoctor() && request.resource.data.doctorId == request.auth.uid && isDoctorManagingPatient(request.resource.data.patientRecordId) )
                      );

      allow read: if isAuthenticated() &&
                    ( (isPatient() && resource.data.patientAuthUid == request.auth.uid) ||
                      (isDoctor() && resource.data.doctorId == request.auth.uid) || // Doctor reading their own appointments
                      (isDoctor() && isDoctorManagingPatient(resource.data.patientRecordId) ) // Doctor reading appointments of managed patient
                    );

      allow update, delete: if isAuthenticated() &&
                              ( (isPatient() && resource.data.patientAuthUid == request.auth.uid && request.resource.data.patientAuthUid == resource.data.patientAuthUid ) || // Patient can update/cancel own
                                (isDoctor() && resource.data.doctorId == request.auth.uid && isDoctorManagingPatient(resource.data.patientRecordId) && request.resource.data.doctorId == resource.data.doctorId) ); // Doctor can manage appointments for their patients
    }

    // == Diagnoses Collection ==
    // Assuming diagnoses have: patientRecordId, diagnosedBy (doctor's UID)
    match /diagnoses/{diagnosisId} {
      allow create: if isDoctorManagingPatient(request.resource.data.patientRecordId) &&
                      request.resource.data.diagnosedBy == request.auth.uid;

      allow read: if isAuthenticated() &&
                    ( isDoctorManagingPatient(resource.data.patientRecordId) ||
                      isLinkedPatient(resource.data.patientRecordId) );

      allow update: if isDoctorManagingPatient(resource.data.patientRecordId) &&
                      resource.data.diagnosedBy == request.auth.uid &&
                      request.resource.data.diagnosedBy == resource.data.diagnosedBy && // diagnosedBy cannot change
                      request.resource.data.patientRecordId == resource.data.patientRecordId; // patientRecordId cannot change

      allow delete: if isDoctorManagingPatient(resource.data.patientRecordId) &&
                      resource.data.diagnosedBy == request.auth.uid;
    }

    // == PatientDocuments Collection ==
    // Assuming documents have: patientRecordId, uploadedBy (doctor's UID)
    match /patientDocuments/{documentId} {
      allow create: if isDoctorManagingPatient(request.resource.data.patientRecordId) &&
                      request.resource.data.uploadedBy == request.auth.uid;

      allow read: if isAuthenticated() &&
                    ( isDoctorManagingPatient(resource.data.patientRecordId) ||
                      isLinkedPatient(resource.data.patientRecordId) );

      allow delete: if isDoctorManagingPatient(resource.data.patientRecordId) &&
                      resource.data.uploadedBy == request.auth.uid;
    }

    // == ChatMessages Collection ==
    // Assuming chatMessages have: patientAuthUid, senderId, isUser, patientRecordId (for doctor access)
    match /chatMessages/{chatId} {
      allow create: if isAuthenticated() &&
                      isPatient() &&
                      request.resource.data.patientAuthUid == request.auth.uid &&
                      request.resource.data.senderId == request.auth.uid &&
                      request.resource.data.isUser == true;
                      // AI responses must be written by a backend/admin process with elevated privileges

      allow read: if isAuthenticated() &&
                    ( (isPatient() && resource.data.patientAuthUid == request.auth.uid) ||
                      (isDoctor() && isDoctorManagingPatient(resource.data.patientRecordId) )
                    );

      allow update, delete: if false; // Generally, chat messages are immutable
    }

    // == PillReminders Collection ==
    // Assuming pillReminders have: patientAuthUid
    match /pillReminders/{reminderId} {
      allow create: if isPatient() &&
                      request.resource.data.patientAuthUid == request.auth.uid;

      allow read, delete: if isPatient() &&
                            resource.data.patientAuthUid == request.auth.uid;

      allow update: if isPatient() &&
                      resource.data.patientAuthUid == request.auth.uid &&
                      // Ensure patientAuthUid is not changed on update
                      request.resource.data.patientAuthUid == resource.data.patientAuthUid;
    }
  }
}

    