rules_version = '2';

service cloud.firestore {

  // ==================================
  // == Helper Functions ==
  // ==================================

  function isAuthenticated() {
    return request.auth != null;
  }

  function isDoctor() {
    // NO 'if' statements allowed!
    // Check for auth first in the return statement.
    let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    return isAuthenticated() && userData != null && userData.userType == 'doctor';
  }

  function isPatient() {
    // NO 'if' statements allowed!
    let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    return isAuthenticated() && userData != null && userData.userType == 'patient';
  }

  // Check if the authenticated doctor manages the patient record.
  function isDoctorManagingPatient(patientRecordId) {
    // NO 'if' statements allowed!
    // Use $() for path variables, not +.
    let patientRecord = get(/databases/$(database)/documents/patientRecords/$(patientRecordId)).data;
    return isDoctor() && // Ensure user is a doctor first
           (patientRecordId is string && patientRecordId.size() > 0) &&
           patientRecord != null &&
           patientRecord.doctorId == request.auth.uid;
  }

  // Check if the authenticated patient is linked to the patient record.
  function isLinkedPatient(patientRecordId) {
    // NO 'if' statements allowed!
    // Use $() for path variables, not +.
    let patientRecord = get(/databases/$(database)/documents/patientRecords/$(patientRecordId)).data;
    return isPatient() && // Ensure user is a patient first
           (patientRecordId is string && patientRecordId.size() > 0) &&
           patientRecord != null &&
           patientRecord.linkedAuthUid == request.auth.uid;
  }

  // NOTE: isDoctorManagingPatientByPatientAuthUid is REMOVED as it relies
  // on queries, which are NOT allowed in security rules.
  // You MUST fix your data model or use backend functions for this lookup.

  // ==================================
  // == Collection Rules ==
  // ==================================

  match /databases/{database}/documents {

    // == Users Collection ==
    match /users/{userId} {
      allow create: if isAuthenticated() &&
                      request.auth.uid == userId &&
                      request.resource.data.uid == request.auth.uid &&
                      request.resource.data.email == request.auth.token.email &&
                      request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                      request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                      request.resource.data.userType is string && (request.resource.data.userType == 'doctor' || request.resource.data.userType == 'patient') &&
                      request.resource.data.createdAt == request.time;

      allow read: if isAuthenticated() && (request.auth.uid == userId || isDoctor());

      allow update: if isAuthenticated() &&
                      request.auth.uid == userId &&
                      request.resource.data.uid == resource.data.uid &&
                      request.resource.data.email == resource.data.email &&
                      request.resource.data.userType == resource.data.userType &&
                      request.resource.data.createdAt == resource.data.createdAt;
                      // Consider adding hasOnly() if you want to strictly control fields.

      allow delete: if false;
    }

    // == PatientRecords Collection ==
    match /patientRecords/{recordId} {
      allow create: if isDoctor() &&
                      request.resource.data.doctorId == request.auth.uid &&
                      request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                      request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                      request.resource.data.idNumber is string && request.resource.data.idNumber.size() > 0 &&
                      request.resource.data.initialPassword is string && request.resource.data.initialPassword.size() >= 6 &&
                      request.resource.data.createdAt == request.time &&
                      !('linkedAuthUid' in request.resource.data);

      allow read: if isAuthenticated() &&
                    ( isDoctorManagingPatient(recordId) || isLinkedPatient(recordId) );

      allow update: if isDoctorManagingPatient(recordId) &&
                      request.resource.data.doctorId == resource.data.doctorId &&
                      request.resource.data.idNumber == resource.data.idNumber &&
                      request.resource.data.createdAt == resource.data.createdAt;

      allow delete: if isDoctorManagingPatient(recordId);
    }

    // == AiInstructions Collection ==
    match /aiInstructions/{doctorId} {
      allow read, write: if isDoctor() && request.auth.uid == doctorId;
    }

    // == Appointments Collection ==
    // ** WARNING **: Doctor access rules here rely on `isDoctorManagingPatientByPatientAuthUid`
    // which is NOT possible with security rules alone. These rules will currently
    // NOT allow doctors to read/create/update appointments for patients unless they
    // are also the `doctorId` on the appointment itself.
    match /appointments/{appointmentId} {
      allow create: if isAuthenticated() &&
                      ( (isPatient() && request.resource.data.patientAuthUid == request.auth.uid) ||
                        (isDoctor() && request.resource.data.doctorId == request.auth.uid) );
                        // You MUST add a valid check here if doctors create for patients.

      allow read: if isAuthenticated() &&
                    ( (isPatient() && resource.data.patientAuthUid == request.auth.uid) ||
                      (isDoctor() && resource.data.doctorId == request.auth.uid) );
                      // Doctor read access for patients needs a valid check.

      allow update, delete: if isAuthenticated() &&
                              ( (isPatient() && resource.data.patientAuthUid == request.auth.uid) ||
                                (isDoctor() && resource.data.doctorId == request.auth.uid) );
                                // Doctor update/delete for patients needs a valid check.
    }

    // == Diagnoses Collection ==
    match /diagnoses/{diagnosisId} {
      allow create: if isDoctorManagingPatient(request.resource.data.patientRecordId) &&
                      request.resource.data.diagnosedBy == request.auth.uid;

      allow read: if isAuthenticated() &&
                    ( isDoctorManagingPatient(resource.data.patientRecordId) ||
                      isLinkedPatient(resource.data.patientRecordId) );

      allow update, delete: if isDoctorManagingPatient(resource.data.patientRecordId) &&
                              resource.data.diagnosedBy == request.auth.uid;
    }

    // == PatientDocuments Collection ==
    match /patientDocuments/{documentId} {
      allow create: if isDoctorManagingPatient(request.resource.data.patientRecordId) &&
                      request.resource.data.uploadedBy == request.auth.uid;

      allow read: if isAuthenticated() &&
                    ( isDoctorManagingPatient(resource.data.patientRecordId) ||
                      isLinkedPatient(resource.data.patientRecordId) );

      allow delete: if isDoctorManagingPatient(resource.data.patientRecordId) &&
                      resource.data.uploadedBy == request.auth.uid;
    }

    // == ChatMessages Collection ==
    match /chatMessages/{chatId} {
      allow create: if isAuthenticated() &&
                      isPatient() &&
                      request.resource.data.patientAuthUid == request.auth.uid &&
                      request.resource.data.senderId == request.auth.uid &&
                      request.resource.data.isUser == true;

      allow read: if isAuthenticated() &&
                    isPatient() &&
                    resource.data.patientAuthUid == request.auth.uid;
                    // Doctor read access requires a data model change or backend functions.

      allow update, delete: if false;
    }

    // == PillReminders Collection ==
    match /pillReminders/{reminderId} {
      allow create: if isPatient() &&
                      request.resource.data.patientAuthUid == request.auth.uid;

      allow read, delete: if isPatient() &&
                            resource.data.patientAuthUid == request.auth.uid;

      allow update: if isPatient() &&
                      resource.data.patientAuthUid == request.auth.uid &&
                      request.resource.data.patientAuthUid == request.auth.uid;
    }
  }
}