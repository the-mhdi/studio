
rules_version = '2';

service cloud.firestore {
  function isAuthenticated() {
    return request.auth != null;
  }

  function isUser(userId) {
    return isAuthenticated() && request.auth.uid == userId;
  }

  // Helper to get user data - use cautiously due to read costs
  function getUserData(userId) {
    // Ensure userId is a non-empty string before using in path
    if (!(userId is string && userId.size() > 0)) {
      return null; // Or handle as an error/false condition appropriately
    }
    return get(/databases/$(database)/documents/users/ + userId).data;
  }

  function isDoctor() {
    if (!isAuthenticated()) {
      return false;
    }
    let userData = getUserData(request.auth.uid);
    return userData != null && userData.userType == 'doctor';
  }

  function isPatient() {
    if (!isAuthenticated()) {
      return false;
    }
    let userData = getUserData(request.auth.uid);
    return userData != null && userData.userType == 'patient';
  }

  function isDoctorManagingPatient(patientRecordId) {
    if (!isAuthenticated() || !isDoctor()) {
      return false;
    }
    if (!(patientRecordId is string && patientRecordId.size() > 0)) {
      return false;
    }
    let patientRecord = get(/databases/$(database)/documents/patientRecords/ + patientRecordId).data;
    return patientRecord != null && patientRecord.doctorId == request.auth.uid;
  }


  match /databases/{database}/documents {
    match /users/{userId} {
      allow create: if isAuthenticated() &&
                       request.auth.uid == userId &&
                       request.resource.data.uid == userId &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                       request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                       request.resource.data.userType is string && (request.resource.data.userType == 'doctor' || request.resource.data.userType == 'patient') &&
                       request.resource.data.createdAt == request.time;

      allow read: if isUser(userId) || isDoctor(); // Doctors can read any user profile (for now), users can read their own.

      allow update: if isUser(userId) &&
                       request.resource.data.uid == resource.data.uid &&
                       request.resource.data.email == resource.data.email &&
                       request.resource.data.userType == resource.data.userType &&
                       request.resource.data.createdAt == resource.data.createdAt; // Prevent changing critical fields

      allow delete: if false; // Generally, don't allow client-side user deletion directly
    }

    match /patientRecords/{recordId} {
      // TEMPORARILY SIMPLIFIED FOR DEBUGGING:
      allow create: if isAuthenticated() &&
                       request.resource.data.doctorId == request.auth.uid &&
                       request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                       request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                       request.resource.data.idNumber is string && request.resource.data.idNumber.size() > 0 &&
                       request.resource.data.createdAt == request.time;
      // END TEMPORARY

      // ORIGINAL STRICTER RULE (Commented out for now):
      // allow create: if isAuthenticated() &&
      //                  isDoctor() && 
      //                  request.resource.data.doctorId == request.auth.uid &&
      //                  request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
      //                  request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
      //                  request.resource.data.idNumber is string && request.resource.data.idNumber.size() > 0 &&
      //                  request.resource.data.createdAt == request.time; 
                        // Ensure server timestamp is used for createdAt

      allow read: if isAuthenticated() && 
                     (isDoctorManagingPatient(recordId) || 
                      (isPatient() && getUserData(request.auth.uid).linkedPatientRecordId == recordId)); // Assuming a patient profile links to their record
      
      allow update: if isAuthenticated() && 
                       isDoctorManagingPatient(recordId) &&
                       request.resource.data.doctorId == resource.data.doctorId && // doctorId cannot change
                       request.resource.data.createdAt == resource.data.createdAt; // createdAt cannot change
                       // Add specific field update permissions

      allow delete: if isAuthenticated() && isDoctorManagingPatient(recordId);
    }

    match /aiInstructions/{doctorId} {
      allow read, write: if isAuthenticated() && 
                            isDoctor() && 
                            request.auth.uid == doctorId;
    }

    match /appointments/{appointmentId} {
      allow create: if isAuthenticated() &&
                       ( (isPatient() && request.resource.data.patientId == request.auth.uid) ||
                         (isDoctor() && isDoctorManagingPatient(get(/databases/$(database)/documents/users/ + request.resource.data.patientId).data.linkedPatientRecordId)) // Doctor can create for their patient
                       ) &&
                       request.resource.data.createdAt == request.time;

      allow read: if isAuthenticated() && 
                     ( (isPatient() && resource.data.patientId == request.auth.uid) ||
                       (isDoctor() && resource.data.doctorId == request.auth.uid) || // Doctor can read their own appointments
                       (isDoctor() && isDoctorManagingPatient(get(/databases/$(database)/documents/users/ + resource.data.patientId).data.linkedPatientRecordId)) // Doctor can read their patient's appointments
                     );

      allow update: if isAuthenticated() && 
                       ( (isPatient() && resource.data.patientId == request.auth.uid && request.resource.data.patientId == resource.data.patientId) ||
                         (isDoctor() && resource.data.doctorId == request.auth.uid && request.resource.data.doctorId == resource.data.doctorId)
                       ) &&
                       request.resource.data.createdAt == resource.data.createdAt; // Only allow involved parties to update certain fields

      allow delete: if isAuthenticated() && 
                       ( (isPatient() && resource.data.patientId == request.auth.uid) ||
                         (isDoctor() && resource.data.doctorId == request.auth.uid)
                       );
    }

    match /diagnoses/{diagnosisId} {
      allow create: if isAuthenticated() && 
                       isDoctor() &&
                       isDoctorManagingPatient(request.resource.data.patientId) && // Assuming patientId here is the patientRecordId
                       request.resource.data.diagnosedBy == request.auth.uid &&
                       request.resource.data.createdAt == request.time;

      allow read: if isAuthenticated() &&
                     ( (isPatient() && resource.data.patientId == getUserData(request.auth.uid).linkedPatientRecordId) || // Patient can read their own diagnoses
                       (isDoctor() && resource.data.diagnosedBy == request.auth.uid) || // Doctor can read diagnoses they made
                       (isDoctor() && isDoctorManagingPatient(resource.data.patientId))    // Doctor can read diagnoses of their patients
                     );
      
      allow update: if isAuthenticated() &&
                       isDoctor() &&
                       resource.data.diagnosedBy == request.auth.uid && // Only the diagnosing doctor can update
                       request.resource.data.diagnosedBy == resource.data.diagnosedBy &&
                       request.resource.data.patientId == resource.data.patientId &&
                       request.resource.data.createdAt == resource.data.createdAt;

      allow delete: if isAuthenticated() &&
                       isDoctor() &&
                       resource.data.diagnosedBy == request.auth.uid; // Only the diagnosing doctor can delete
    }

    match /patientDocuments/{documentId} {
      // Assuming patientId on document refers to patientRecordId
      allow create: if isAuthenticated() && 
                       isDoctor() &&
                       isDoctorManagingPatient(request.resource.data.patientId) && // Doctor can upload for their patient
                       request.resource.data.uploadedBy == request.auth.uid &&
                       request.resource.data.uploadedAt == request.time;

      allow read: if isAuthenticated() && 
                     ( (isPatient() && resource.data.patientId == getUserData(request.auth.uid).linkedPatientRecordId) || // Patient can read their documents
                       (isDoctor() && isDoctorManagingPatient(resource.data.patientId))      // Doctor can read documents of their patients
                     );

      allow delete: if isAuthenticated() && 
                       isDoctor() &&
                       isDoctorManagingPatient(resource.data.patientId) &&
                       resource.data.uploadedBy == request.auth.uid; // Only the uploader doctor can delete
    }

    match /chatMessages/{chatId} {
      // Assuming patientId on message refers to patient's auth UID
      allow create: if isAuthenticated() &&
                       request.resource.data.patientId == request.auth.uid && // Patient sends their own message
                       request.resource.data.senderId == request.auth.uid &&
                       request.resource.data.isUser == true &&
                       request.resource.data.sentAt == request.time;
                       // AI responses would be written by a trusted server environment

      allow read: if isAuthenticated() && 
                     ( (isPatient() && resource.data.patientId == request.auth.uid) || // Patient reads their own chat
                       (isDoctor() && isDoctorManagingPatient(get(/databases/$(database)/documents/users/ + resource.data.patientId).data.linkedPatientRecordId)) // Doctor reads their patient's chat
                     );
    }
    
    match /pillReminders/{reminderId} {
        allow read, write: if isAuthenticated() && 
                              isPatient() && 
                              request.resource.data.patientUid == request.auth.uid; // Patient CRUDs their own reminders
        allow create: if isAuthenticated() &&
                         isPatient() &&
                         request.resource.data.patientUid == request.auth.uid;
    }
  }
}

    