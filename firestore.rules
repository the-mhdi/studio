
rules_version = '2';

service cloud.firestore {

  // ==================================
  // == Helper Functions ==
  // ==================================

  function isAuthenticated() {
    return request.auth != null;
  }

  function isDoctor() {
    if (!isAuthenticated() || request.auth.uid == null) {
      return false;
    }
    // Fetch the user document
    let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
    // Check if document exists and data is not null, then check userType
    return userDoc != null && userDoc.data != null && userDoc.data.userType == 'doctor';
  }

  function isPatient() {
    if (!isAuthenticated() || request.auth.uid == null) {
      return false;
    }
    // Fetch the user document
    let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
    // Check if document exists and data is not null, then check userType
    return userDoc != null && userDoc.data != null && userDoc.data.userType == 'patient';
  }

  // Check if the authenticated doctor manages the patient record.
  function isDoctorManagingPatient(patientRecordId) {
    if (!isDoctor() || !(patientRecordId is string && patientRecordId.size() > 0)) {
      return false;
    }
    let patientRecord = get(/databases/$(database)/documents/patientRecords/ + patientRecordId).data;
    return patientRecord != null &&
           patientRecord.doctorId == request.auth.uid;
  }

  // Check if the authenticated patient is linked to the patient record.
  function isLinkedPatient(patientRecordId) {
    if (!isPatient() || !(patientRecordId is string && patientRecordId.size() > 0) ) {
        return false;
    }
    let patientRecord = get(/databases/$(database)/documents/patientRecords/ + patientRecordId).data;
    return patientRecord != null &&
           patientRecord.linkedAuthUid == request.auth.uid;
  }

  // ==================================
  // == Collection Rules ==
  // ==================================

  match /databases/{database}/documents {

    // == Users Collection ==
    match /users/{userId} {
      allow create: if isAuthenticated() &&
                      request.auth.uid == userId &&
                      request.resource.data.uid == request.auth.uid &&
                      request.resource.data.email == request.auth.token.email &&
                      request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                      request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                      request.resource.data.userType is string && (request.resource.data.userType == 'doctor' || request.resource.data.userType == 'patient') &&
                      request.resource.data.createdAt == request.time;

      allow read: if isAuthenticated(); // Allows isDoctor/isPatient helpers to read user docs

      allow update: if isAuthenticated() &&
                      request.auth.uid == userId &&
                      // Prevent changing critical fields
                      request.resource.data.uid == resource.data.uid &&
                      request.resource.data.email == resource.data.email &&
                      request.resource.data.userType == resource.data.userType &&
                      request.resource.data.createdAt == resource.data.createdAt;

      allow delete: if false; // Generally, don't allow client-side user deletion
    }

    // == PatientRecords Collection ==
    match /patientRecords/{recordId} {
      allow create: if isDoctor() &&
                      request.resource.data.doctorId == request.auth.uid &&
                      request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                      request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                      request.resource.data.idNumber is string && request.resource.data.idNumber.size() > 0 &&
                      request.resource.data.initialPassword is string && request.resource.data.initialPassword.size() >= 6 &&
                      // request.resource.data.createdAt == request.time; // Removed due to serverTimestamp()
                      !('linkedAuthUid' in request.resource.data);       // Cannot set linkedAuthUid on create

      // WARNING: The 'if true' is for broad client-side query for Patient ID login.
      // Replace with a secure backend check for production.
      allow read: if true;
                  // More secure read for specific scenarios:
                  // if isAuthenticated() &&
                  //  ( isDoctorManagingPatient(recordId) || isLinkedPatient(recordId) );

      allow update: if isDoctorManagingPatient(recordId) &&
                      request.resource.data.doctorId == resource.data.doctorId &&
                      request.resource.data.createdAt == resource.data.createdAt;
                      // Allow other updates, including linkedAuthUid

      allow delete: if isDoctorManagingPatient(recordId);
    }

    // == AiInstructions Collection ==
    match /aiInstructions/{doctorId} {
      allow read, write: if isDoctor() && request.auth.uid == doctorId;
    }

    // == Appointments Collection ==
    match /appointments/{appointmentId} {
      allow create: if isAuthenticated() &&
                      ( (isPatient() && request.resource.data.patientAuthUid == request.auth.uid) ||
                        (isDoctor() && isDoctorManagingPatient(request.resource.data.patientRecordId) ) // Example: Doctor can only schedule for patients they manage
                      );


      allow read: if isAuthenticated() &&
                    ( (isPatient() && resource.data.patientAuthUid == request.auth.uid) ||
                      (isDoctor() && resource.data.doctorId == request.auth.uid) || // Doctor can see their appointments
                      (isDoctor() && isDoctorManagingPatient(resource.data.patientRecordId)) // Doctor can see appointments of patients they manage
                    );

      allow update, delete: if isAuthenticated() &&
                              ( (isPatient() && resource.data.patientAuthUid == request.auth.uid && request.resource.data.patientAuthUid == resource.data.patientAuthUid) ||
                                (isDoctor() && resource.data.doctorId == request.auth.uid && request.resource.data.doctorId == resource.data.doctorId)
                              );
    }

    // == Diagnoses Collection ==
    match /diagnoses/{diagnosisId} {
      allow create: if isDoctorManagingPatient(request.resource.data.patientRecordId) &&
                      request.resource.data.diagnosedBy == request.auth.uid;

      allow read: if isAuthenticated() &&
                    ( isDoctorManagingPatient(resource.data.patientRecordId) ||
                      isLinkedPatient(resource.data.patientRecordId) );

      allow update: if isDoctorManagingPatient(resource.data.patientRecordId) &&
                              resource.data.diagnosedBy == request.auth.uid &&
                              request.resource.data.diagnosedBy == resource.data.diagnosedBy; // Don't change who diagnosed

      allow delete: if isDoctorManagingPatient(resource.data.patientRecordId) &&
                              resource.data.diagnosedBy == request.auth.uid;
    }

    // == PatientDocuments Collection ==
    // Assuming patientRecordId in document refers to the ID in /patientRecords collection
    match /patientDocuments/{documentId} {
      allow create: if isDoctorManagingPatient(request.resource.data.patientRecordId) &&
                      request.resource.data.uploadedBy == request.auth.uid;

      allow read: if isAuthenticated() &&
                    ( isDoctorManagingPatient(resource.data.patientRecordId) ||
                      isLinkedPatient(resource.data.patientRecordId) );

      allow delete: if isDoctorManagingPatient(resource.data.patientRecordId) &&
                      resource.data.uploadedBy == request.auth.uid;
    }

    // == ChatMessages Collection ==
    match /chatMessages/{chatId} {
      allow create: if isAuthenticated() &&
                      isPatient() && // Only patients send messages via client
                      request.resource.data.patientAuthUid == request.auth.uid &&
                      request.resource.data.senderId == request.auth.uid && // Sender must be the patient
                      request.resource.data.isUser == true;
                      // AI responses would be written by a backend/admin process

      // Reading chat history:
      // Patient can read their own.
      // Doctor can read if they manage the patient associated with resource.data.patientAuthUid.
      // This requires linking patientAuthUid back to a patientRecordId the doctor manages.
      // This rule might need a patientRecordId field on chatMessages or a more complex get.
      // For simplicity, this example assumes a patientRecordId could be on chat message, or relies on patientAuthUid
      // which is less direct for doctor check without another get.
      allow read: if isAuthenticated() &&
                    ( (isPatient() && resource.data.patientAuthUid == request.auth.uid)
                      // Add doctor read access if they manage the patient, this is complex
                      // and might need a helper or a specific field on chatMessage like patientRecordId
                    );

      allow update, delete: if false; // Generally, chat messages are immutable
    }

    // == PillReminders Collection ==
    match /pillReminders/{reminderId} {
      allow create: if isPatient() &&
                      request.resource.data.patientAuthUid == request.auth.uid;

      allow read, delete: if isPatient() &&
                            resource.data.patientAuthUid == request.auth.uid;

      allow update: if isPatient() &&
                      resource.data.patientAuthUid == request.auth.uid &&
                      request.resource.data.patientAuthUid == resource.data.patientAuthUid; // Ensure patientAuthUid isn't changed
    }
  }
}

    