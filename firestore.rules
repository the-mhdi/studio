rules_version = '2';

service cloud.firestore {

  // ==================================
  // == Helper Functions ==
  // ==================================

  function isAuthenticated() {
    return request.auth != null;
  }

  function isDoctor() {
    if (!isAuthenticated() || request.auth.uid == null) {
      return false;
    }
    let userDocPath = /databases/$(database)/documents/users/$(request.auth.uid);
    // Ensure the document exists and data.userType is correctly 'doctor'
    return exists(userDocPath) &&
           get(userDocPath).data != null && // Check data object exists
           get(userDocPath).data.userType == 'doctor';
  }

  function isPatient() {
    if (!isAuthenticated() || request.auth.uid == null) {
      return false;
    }
    let userDocPath = /databases/$(database)/documents/users/$(request.auth.uid);
    // Ensure the document exists and data.userType is correctly 'patient'
    return exists(userDocPath) &&
           get(userDocPath).data != null && // Check data object exists
           get(userDocPath).data.userType == 'patient';
  }

  // Check if the authenticated doctor manages the patient record.
  function isDoctorManagingPatient(patientRecordId) {
    if (!isDoctor() || !(patientRecordId is string) || patientRecordId.size() == 0) {
      return false;
    }
    let patientRecordPath = /databases/$(database)/documents/patientRecords/$(patientRecordId);
    return exists(patientRecordPath) &&
           get(patientRecordPath).data != null && // Check data object exists
           get(patientRecordPath).data.doctorId == request.auth.uid;
  }

  // Check if the authenticated patient is linked to the patient record.
  function isLinkedPatient(patientRecordId) {
    if (!isPatient() || !(patientRecordId is string) || patientRecordId.size() == 0) {
      return false;
    }
    let patientRecordPath = /databases/$(database)/documents/patientRecords/$(patientRecordId);
    return exists(patientRecordPath) &&
           get(patientRecordPath).data != null && // Check data object exists
           get(patientRecordPath).data.linkedAuthUid == request.auth.uid;
  }

  // ==================================
  // == Collection Rules ==
  // ==================================

  match /databases/{database}/documents {

    // == Users Collection ==
    match /users/{userId} {
      allow create: if isAuthenticated() &&
                      request.auth.uid == userId &&
                      request.resource.data.uid == request.auth.uid &&
                      request.resource.data.email == request.auth.token.email &&
                      request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                      request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                      request.resource.data.userType is string && (request.resource.data.userType == 'doctor' || request.resource.data.userType == 'patient') &&
                      'createdAt' in request.resource.data; // Expecting serverTimestamp from client

      allow read: if isAuthenticated() &&
                    (request.auth.uid == userId || isDoctor()); // User can read own, or any doctor can read

      allow update: if isAuthenticated() &&
                      request.auth.uid == userId &&
                      // Prevent changing critical fields
                      request.resource.data.uid == resource.data.uid &&
                      request.resource.data.email == resource.data.email &&
                      request.resource.data.userType == resource.data.userType &&
                      request.resource.data.createdAt == resource.data.createdAt;

      allow delete: if false;
    }

    // == PatientRecords Collection ==
    match /patientRecords/{recordId} {
      allow create: if isDoctor() &&
                      request.resource.data.doctorId is string && request.resource.data.doctorId == request.auth.uid &&
                      request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                      request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                      request.resource.data.idNumber is string && request.resource.data.idNumber.size() > 0 &&
                      request.resource.data.initialPassword is string && request.resource.data.initialPassword.size() >= 6 &&
                      'createdAt' in request.resource.data && // Expecting serverTimestamp from client
                      !('linkedAuthUid' in request.resource.data);

      allow read: if isAuthenticated() &&
                    ( isDoctorManagingPatient(recordId) || isLinkedPatient(recordId) );

      allow update: if isDoctorManagingPatient(recordId) &&
                      request.resource.data.doctorId is string && request.resource.data.doctorId == resource.data.doctorId &&
                      request.resource.data.createdAt == resource.data.createdAt;

      allow delete: if isDoctorManagingPatient(recordId);
    }

    // == AiInstructions Collection ==
    match /aiInstructions/{doctorId} {
      allow read, write: if isDoctor() && request.auth.uid == doctorId;
    }

    // == Appointments Collection ==
    match /appointments/{appointmentId} {
      allow create: if isAuthenticated() &&
                      ( (isPatient() && request.resource.data.patientAuthUid is string && request.resource.data.patientAuthUid == request.auth.uid) ||
                        (isDoctor() && request.resource.data.patientRecordId is string && isDoctorManagingPatient(request.resource.data.patientRecordId)) );

      allow read: if isAuthenticated() &&
                    ( (isPatient() && resource.data.patientAuthUid is string && resource.data.patientAuthUid == request.auth.uid) ||
                      (isDoctor() && resource.data.doctorId is string && resource.data.doctorId == request.auth.uid) );

      allow update, delete: if isAuthenticated() &&
                              ( (isPatient() && resource.data.patientAuthUid is string && resource.data.patientAuthUid == request.auth.uid && request.resource.data.patientAuthUid == resource.data.patientAuthUid ) ||
                                (isDoctor() && resource.data.doctorId is string && resource.data.doctorId == request.auth.uid && request.resource.data.doctorId == resource.data.doctorId) );
    }

    // == Diagnoses Collection ==
    match /diagnoses/{diagnosisId} {
      allow create: if request.resource.data.patientRecordId is string && isDoctorManagingPatient(request.resource.data.patientRecordId) &&
                      request.resource.data.diagnosedBy is string && request.resource.data.diagnosedBy == request.auth.uid;

      allow read: if isAuthenticated() && resource.data.patientRecordId is string &&
                    ( isDoctorManagingPatient(resource.data.patientRecordId) ||
                      isLinkedPatient(resource.data.patientRecordId) );

      allow update, delete: if resource.data.patientRecordId is string && isDoctorManagingPatient(resource.data.patientRecordId) &&
                              resource.data.diagnosedBy is string && resource.data.diagnosedBy == request.auth.uid;
    }

    // == PatientDocuments Collection ==
    match /patientDocuments/{documentId} {
      allow create: if request.resource.data.patientRecordId is string && isDoctorManagingPatient(request.resource.data.patientRecordId) &&
                      request.resource.data.uploadedBy is string && request.resource.data.uploadedBy == request.auth.uid;

      allow read: if isAuthenticated() && resource.data.patientRecordId is string &&
                    ( isDoctorManagingPatient(resource.data.patientRecordId) ||
                      isLinkedPatient(resource.data.patientRecordId) );

      allow delete: if resource.data.patientRecordId is string && isDoctorManagingPatient(resource.data.patientRecordId) &&
                      resource.data.uploadedBy is string && resource.data.uploadedBy == request.auth.uid;
    }

    // == ChatMessages Collection ==
    match /chatMessages/{chatId} {
      allow create: if isAuthenticated() &&
                      isPatient() &&
                      request.resource.data.patientAuthUid is string && request.resource.data.patientAuthUid == request.auth.uid &&
                      request.resource.data.senderId is string && request.resource.data.senderId == request.auth.uid &&
                      request.resource.data.isUser == true;

      allow read: if isAuthenticated() &&
                    ( (isPatient() && resource.data.patientAuthUid is string && resource.data.patientAuthUid == request.auth.uid) ||
                      (isDoctor() && resource.data.patientRecordId is string && exists(/databases/$(database)/documents/patientRecords/$(resource.data.patientRecordId)) && get(/databases/$(database)/documents/patientRecords/$(resource.data.patientRecordId)).data.doctorId == request.auth.uid)
                    );

      allow update, delete: if false;
    }

    // == PillReminders Collection ==
    match /pillReminders/{reminderId} {
      allow create: if isPatient() &&
                      request.resource.data.patientAuthUid is string && request.resource.data.patientAuthUid == request.auth.uid;

      allow read, delete: if isPatient() &&
                            resource.data.patientAuthUid is string && resource.data.patientAuthUid == request.auth.uid;

      allow update: if isPatient() &&
                      resource.data.patientAuthUid is string && resource.data.patientAuthUid == request.auth.uid &&
                      request.resource.data.patientAuthUid is string && request.resource.data.patientAuthUid == request.auth.uid;
    }
  }
}
